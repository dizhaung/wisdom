{
    "docs": [
        {
            "location": "/",
            "text": "Wisdom Stream Processor\n\n\nWisdom is an adaptive, distributed and self-boosting stream processor written in Java 9 using modern architecture. After publishing all the results, Wisdom will be made open source.\n\n\nIf you like to use Wisdom for your research, please contact the author via: \nlgobinat@uwo.ca\n.",
            "title": "Home"
        },
        {
            "location": "/#wisdom-stream-processor",
            "text": "Wisdom is an adaptive, distributed and self-boosting stream processor written in Java 9 using modern architecture. After publishing all the results, Wisdom will be made open source.  If you like to use Wisdom for your research, please contact the author via:  lgobinat@uwo.ca .",
            "title": "Wisdom Stream Processor"
        },
        {
            "location": "/getting-started/",
            "text": "Wisdom offers a complete Java API and Wisdom query to develop Complex Event Processing (CEP) applications. Wisdom can be used as a Java library or standalone service. Java library is recommended for testing purposes, small scale applications and Android applications. If you are developing a resource consuming CEP application, it is recommended to use Wisdom Service. Wisdom Service is the only way to use HTTP Source and Sinks. This section explains how to create a simple CEP application using Wisdom Java API and Wisdom Query.\n\n\nRequirements\n\n\nMake sure that you have set up the following softwares in your system before building Wisdom.\n\n\n\n\nJava 9 (or latest)\n\n\nApache Maven\n\n\nApache Kafka (for self-boosting deployment)\n\n\n\n\nInstallation\n\n\nPlease contact the author (\nlgobinat@uwo.ca\n) to get access to Wisdom source code. Once you have downloaded the Wisdom source code, follow these steps to build and install Wisdom library.\n\n\nOpen your terminal and change directory\n\n\ncd wisdom\n\n\n\n\nCompile and install Wisdom using Apache Maven\n\n\nmvn clean install\n\n\n\n\nWisdom Java API\n\n\nCreate a new Maven Project in your favorite IDE. We use \nIntelliJ IDEA\n throughout this document.\n\n\nOpen the \npom.xml\n file add \nwisdom-core\n and optionally \nlogback\n dependencies as shown below:\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.javahelps</groupId>\n    <artifactId>wisdom-java-api</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.9</source>\n                    <target>1.9</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <properties>\n        <wisdom.version>0.0.1</wisdom.version>\n        <slf4j.version>1.7.25</slf4j.version>\n        <logback.version>1.2.3</logback.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.javahelps.wisdom</groupId>\n            <artifactId>wisdom-core</artifactId>\n            <version>${wisdom.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n    </dependencies>\n\n</project>\n\n\n\n\nCreate a new Java class \ncom.javahelps.helloworld.javaapi.HelloWorld\n with the following code.\n\n\npackage com.javahelps.helloworld.javaapi;\n\nimport com.javahelps.wisdom.core.WisdomApp;\nimport com.javahelps.wisdom.core.operator.Operator;\nimport com.javahelps.wisdom.core.stream.InputHandler;\nimport com.javahelps.wisdom.core.util.EventGenerator;\nimport com.javahelps.wisdom.core.util.EventPrinter;\n\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n\n        // Create a Wisdom application\n        WisdomApp app = new WisdomApp(\"WisdomApp\", \"1.0.0\");\n\n        // Define streams\n        app.defineStream(\"StockStream\");\n        app.defineStream(\"OutputStream\");\n\n        // Create a query\n        app.defineQuery(\"FilterQuery\")\n                .from(\"StockStream\")\n                .filter(Operator.EQUALS(\"symbol\", \"AMAZON\"))\n                .select(\"symbol\", \"price\")\n                .insertInto(\"OutputStream\");\n\n        // Add output stream callback\n        app.addCallback(\"OutputStream\", EventPrinter::print);\n\n        // Get an input handler\n        InputHandler inputHandler = app.getInputHandler(\"StockStream\");\n\n        // Start the application\n        app.start();\n\n        // Send three inputs\n        inputHandler.send(EventGenerator.generate(\"symbol\", \"GOOGLE\", \"price\", 10.5, \"volume\", 10L));\n        inputHandler.send(EventGenerator.generate(\"symbol\", \"AMAZON\", \"price\", 20.5, \"volume\", 20L));\n        inputHandler.send(EventGenerator.generate(\"symbol\", \"FACEBOOK\", \"price\", 30.5, \"volume\", 30L));\n\n        // Shutdown the application\n        app.shutdown();\n    }\n}\n\n\n\n\nAbove code creates Wisdom application with two streams: \nStockStream\n and \nOutputStream\n, and a query named \nFilterQuery\n. The \nFilterQuery\n filters stock events of \nAMAZON\n, select \nsymbol\n and \nprice\n, and insert them into the \nOutputStream\n. \nInputHandler\n is used to feed events to a stream and callback is used to receive events from a stream.\n\n\nRunning this code should print an output similar to this:\n\n\n[Event{timestamp=1524709449322, stream=OutputStream, data={symbol=AMAZON, price=20.5}, expired=false}]\n\n\n\n\nAs you can see, above Wisdom app filters events for AMAZON and prints them to the console.",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#requirements",
            "text": "Make sure that you have set up the following softwares in your system before building Wisdom.   Java 9 (or latest)  Apache Maven  Apache Kafka (for self-boosting deployment)",
            "title": "Requirements"
        },
        {
            "location": "/getting-started/#installation",
            "text": "Please contact the author ( lgobinat@uwo.ca ) to get access to Wisdom source code. Once you have downloaded the Wisdom source code, follow these steps to build and install Wisdom library.  Open your terminal and change directory  cd wisdom  Compile and install Wisdom using Apache Maven  mvn clean install",
            "title": "Installation"
        },
        {
            "location": "/getting-started/#wisdom-java-api",
            "text": "Create a new Maven Project in your favorite IDE. We use  IntelliJ IDEA  throughout this document.  Open the  pom.xml  file add  wisdom-core  and optionally  logback  dependencies as shown below:  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.javahelps</groupId>\n    <artifactId>wisdom-java-api</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.9</source>\n                    <target>1.9</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <properties>\n        <wisdom.version>0.0.1</wisdom.version>\n        <slf4j.version>1.7.25</slf4j.version>\n        <logback.version>1.2.3</logback.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.javahelps.wisdom</groupId>\n            <artifactId>wisdom-core</artifactId>\n            <version>${wisdom.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n    </dependencies>\n\n</project>  Create a new Java class  com.javahelps.helloworld.javaapi.HelloWorld  with the following code.  package com.javahelps.helloworld.javaapi;\n\nimport com.javahelps.wisdom.core.WisdomApp;\nimport com.javahelps.wisdom.core.operator.Operator;\nimport com.javahelps.wisdom.core.stream.InputHandler;\nimport com.javahelps.wisdom.core.util.EventGenerator;\nimport com.javahelps.wisdom.core.util.EventPrinter;\n\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n\n        // Create a Wisdom application\n        WisdomApp app = new WisdomApp(\"WisdomApp\", \"1.0.0\");\n\n        // Define streams\n        app.defineStream(\"StockStream\");\n        app.defineStream(\"OutputStream\");\n\n        // Create a query\n        app.defineQuery(\"FilterQuery\")\n                .from(\"StockStream\")\n                .filter(Operator.EQUALS(\"symbol\", \"AMAZON\"))\n                .select(\"symbol\", \"price\")\n                .insertInto(\"OutputStream\");\n\n        // Add output stream callback\n        app.addCallback(\"OutputStream\", EventPrinter::print);\n\n        // Get an input handler\n        InputHandler inputHandler = app.getInputHandler(\"StockStream\");\n\n        // Start the application\n        app.start();\n\n        // Send three inputs\n        inputHandler.send(EventGenerator.generate(\"symbol\", \"GOOGLE\", \"price\", 10.5, \"volume\", 10L));\n        inputHandler.send(EventGenerator.generate(\"symbol\", \"AMAZON\", \"price\", 20.5, \"volume\", 20L));\n        inputHandler.send(EventGenerator.generate(\"symbol\", \"FACEBOOK\", \"price\", 30.5, \"volume\", 30L));\n\n        // Shutdown the application\n        app.shutdown();\n    }\n}  Above code creates Wisdom application with two streams:  StockStream  and  OutputStream , and a query named  FilterQuery . The  FilterQuery  filters stock events of  AMAZON , select  symbol  and  price , and insert them into the  OutputStream .  InputHandler  is used to feed events to a stream and callback is used to receive events from a stream.  Running this code should print an output similar to this:  [Event{timestamp=1524709449322, stream=OutputStream, data={symbol=AMAZON, price=20.5}, expired=false}]  As you can see, above Wisdom app filters events for AMAZON and prints them to the console.",
            "title": "Wisdom Java API"
        }
    ]
}